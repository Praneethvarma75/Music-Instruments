{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1OOAwFhTvb6ocaIMfve8sOhzv7dvaGtms","timestamp":1718858794771},{"file_id":"1Tuz0GBdhIdfbRs5jxAHSN7kkwVs9bRi0","timestamp":1718707405341},{"file_id":"1e90LQQXQ1n5ugUtNBweRh84ophGdbNFX","timestamp":1715661468073}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XxRot5BR80XL","executionInfo":{"status":"ok","timestamp":1718860805086,"user_tz":-330,"elapsed":5781,"user":{"displayName":"M. Praneeth","userId":"01426730292304144613"}},"outputId":"19bdd3b7-b204-47da-b2d5-f2322c39d26f"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"markdown","source":["### Load the CSV files\n","\n","- Please uploadn the created the train and test CSV files to the colab environment."],"metadata":{"id":"3peN1O4wWu1P"}},{"cell_type":"code","execution_count":19,"metadata":{"id":"xHIvtz3bUoGj","executionInfo":{"status":"ok","timestamp":1718860805087,"user_tz":-330,"elapsed":50,"user":{"displayName":"M. Praneeth","userId":"01426730292304144613"}}},"outputs":[],"source":["\n","TRAIN_CSV = \"/content/drive/MyDrive/AIClub_AP_Mudunuri_Praneeth/datasets/music_instrument_feature.csv\"\n","TEST_CSV = \"/content/drive/MyDrive/AIClub_AP_Mudunuri_Praneeth/datasets/music_instrument_feature.csv\""]},{"cell_type":"code","source":["import pandas as pd\n","\n","# load the train csv\n","data_train = pd.read_csv(TRAIN_CSV)\n","data_train.head()"],"metadata":{"id":"q3UeS-qXZv5Q","colab":{"base_uri":"https://localhost:8080/","height":253},"executionInfo":{"status":"ok","timestamp":1718860805087,"user_tz":-330,"elapsed":48,"user":{"displayName":"M. Praneeth","userId":"01426730292304144613"}},"outputId":"2d170d93-cd6d-4193-c4c4-9b66aeffb482"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       RMSE  SPECTRAL_CENTROID  SPECTRAL_BANDWIDTH      ROLLOFF  \\\n","0  0.026849         832.086593          810.192938  1329.012733   \n","1  0.206735         907.941817         1192.034489  1882.995793   \n","2  0.127130        1575.713245         1660.819435  3097.551270   \n","3  0.091557        1349.112548         1824.864434  2982.762733   \n","4  0.098121        2161.061507         2520.661924  4807.536058   \n","\n","   ZERO_CROSSING_RATE  MFCC_FEATURE_0  MFCC_FEATURE_1  MFCC_FEATURE_2  \\\n","0            0.060761      -397.64313      202.891080      -18.314198   \n","1            0.041305      -173.60980      176.481120      -17.487156   \n","2            0.082715      -152.60316      131.967160      -38.519390   \n","3            0.043472      -191.74979      126.553510      -14.354351   \n","4            0.077603      -143.44803       86.847534        3.254393   \n","\n","   MFCC_FEATURE_3  MFCC_FEATURE_4  ...  MFCC_FEATURE_11  MFCC_FEATURE_12  \\\n","0        4.595671        7.464968  ...        -8.863886        -3.232259   \n","1       64.209940       12.764759  ...         0.397927        -0.608402   \n","2       26.204031       -2.906238  ...        -7.109600       -21.862885   \n","3       44.730534        6.745143  ...        -0.156913        -4.892558   \n","4       34.360985       25.463150  ...         5.298623         6.359572   \n","\n","   MFCC_FEATURE_13  MFCC_FEATURE_14  MFCC_FEATURE_15  MFCC_FEATURE_16  \\\n","0        -2.563379        -0.046393         2.097677        -5.204055   \n","1         5.595345         6.094729        -0.741953        -0.132119   \n","2       -18.213646       -12.271697        -6.269111       -10.996242   \n","3        -2.856394        -1.636412        -1.651337        -9.099241   \n","4         7.874352        -3.941005        -5.958016        -8.297595   \n","\n","   MFCC_FEATURE_17  MFCC_FEATURE_18  MFCC_FEATURE_19            LABEL  \n","0        -7.896916        -1.224250        -2.038627            piano  \n","1         3.050113         3.534066         2.216849  electric_guitar  \n","2        -6.022158        -9.656895        -3.849789            piano  \n","3        -1.596109        -5.335640        -3.951504            piano  \n","4       -10.491979        -5.848084         7.938865            piano  \n","\n","[5 rows x 26 columns]"],"text/html":["\n","  <div id=\"df-02fab375-1b53-4614-a3cd-d84548907251\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>RMSE</th>\n","      <th>SPECTRAL_CENTROID</th>\n","      <th>SPECTRAL_BANDWIDTH</th>\n","      <th>ROLLOFF</th>\n","      <th>ZERO_CROSSING_RATE</th>\n","      <th>MFCC_FEATURE_0</th>\n","      <th>MFCC_FEATURE_1</th>\n","      <th>MFCC_FEATURE_2</th>\n","      <th>MFCC_FEATURE_3</th>\n","      <th>MFCC_FEATURE_4</th>\n","      <th>...</th>\n","      <th>MFCC_FEATURE_11</th>\n","      <th>MFCC_FEATURE_12</th>\n","      <th>MFCC_FEATURE_13</th>\n","      <th>MFCC_FEATURE_14</th>\n","      <th>MFCC_FEATURE_15</th>\n","      <th>MFCC_FEATURE_16</th>\n","      <th>MFCC_FEATURE_17</th>\n","      <th>MFCC_FEATURE_18</th>\n","      <th>MFCC_FEATURE_19</th>\n","      <th>LABEL</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.026849</td>\n","      <td>832.086593</td>\n","      <td>810.192938</td>\n","      <td>1329.012733</td>\n","      <td>0.060761</td>\n","      <td>-397.64313</td>\n","      <td>202.891080</td>\n","      <td>-18.314198</td>\n","      <td>4.595671</td>\n","      <td>7.464968</td>\n","      <td>...</td>\n","      <td>-8.863886</td>\n","      <td>-3.232259</td>\n","      <td>-2.563379</td>\n","      <td>-0.046393</td>\n","      <td>2.097677</td>\n","      <td>-5.204055</td>\n","      <td>-7.896916</td>\n","      <td>-1.224250</td>\n","      <td>-2.038627</td>\n","      <td>piano</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.206735</td>\n","      <td>907.941817</td>\n","      <td>1192.034489</td>\n","      <td>1882.995793</td>\n","      <td>0.041305</td>\n","      <td>-173.60980</td>\n","      <td>176.481120</td>\n","      <td>-17.487156</td>\n","      <td>64.209940</td>\n","      <td>12.764759</td>\n","      <td>...</td>\n","      <td>0.397927</td>\n","      <td>-0.608402</td>\n","      <td>5.595345</td>\n","      <td>6.094729</td>\n","      <td>-0.741953</td>\n","      <td>-0.132119</td>\n","      <td>3.050113</td>\n","      <td>3.534066</td>\n","      <td>2.216849</td>\n","      <td>electric_guitar</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.127130</td>\n","      <td>1575.713245</td>\n","      <td>1660.819435</td>\n","      <td>3097.551270</td>\n","      <td>0.082715</td>\n","      <td>-152.60316</td>\n","      <td>131.967160</td>\n","      <td>-38.519390</td>\n","      <td>26.204031</td>\n","      <td>-2.906238</td>\n","      <td>...</td>\n","      <td>-7.109600</td>\n","      <td>-21.862885</td>\n","      <td>-18.213646</td>\n","      <td>-12.271697</td>\n","      <td>-6.269111</td>\n","      <td>-10.996242</td>\n","      <td>-6.022158</td>\n","      <td>-9.656895</td>\n","      <td>-3.849789</td>\n","      <td>piano</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.091557</td>\n","      <td>1349.112548</td>\n","      <td>1824.864434</td>\n","      <td>2982.762733</td>\n","      <td>0.043472</td>\n","      <td>-191.74979</td>\n","      <td>126.553510</td>\n","      <td>-14.354351</td>\n","      <td>44.730534</td>\n","      <td>6.745143</td>\n","      <td>...</td>\n","      <td>-0.156913</td>\n","      <td>-4.892558</td>\n","      <td>-2.856394</td>\n","      <td>-1.636412</td>\n","      <td>-1.651337</td>\n","      <td>-9.099241</td>\n","      <td>-1.596109</td>\n","      <td>-5.335640</td>\n","      <td>-3.951504</td>\n","      <td>piano</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.098121</td>\n","      <td>2161.061507</td>\n","      <td>2520.661924</td>\n","      <td>4807.536058</td>\n","      <td>0.077603</td>\n","      <td>-143.44803</td>\n","      <td>86.847534</td>\n","      <td>3.254393</td>\n","      <td>34.360985</td>\n","      <td>25.463150</td>\n","      <td>...</td>\n","      <td>5.298623</td>\n","      <td>6.359572</td>\n","      <td>7.874352</td>\n","      <td>-3.941005</td>\n","      <td>-5.958016</td>\n","      <td>-8.297595</td>\n","      <td>-10.491979</td>\n","      <td>-5.848084</td>\n","      <td>7.938865</td>\n","      <td>piano</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows Ã— 26 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-02fab375-1b53-4614-a3cd-d84548907251')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-02fab375-1b53-4614-a3cd-d84548907251 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-02fab375-1b53-4614-a3cd-d84548907251');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-774d5ed4-e04d-423e-932d-1a74f327fbf4\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-774d5ed4-e04d-423e-932d-1a74f327fbf4')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-774d5ed4-e04d-423e-932d-1a74f327fbf4 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data_train"}},"metadata":{},"execution_count":20}]},{"cell_type":"markdown","source":["### Encoding Labels"],"metadata":{"id":"2gXakmvncLl8"}},{"cell_type":"code","source":["# labels are there as string otherwise words\n","# need to convert the labels into numbers\n","print(data_train[\"LABEL\"].value_counts())\n","LABELS = list(data_train[\"LABEL\"].unique())\n","# sort the labels\n","LABELS.sort()\n","print(LABELS)"],"metadata":{"id":"a2-9NY2RcLL5","executionInfo":{"status":"ok","timestamp":1718860805087,"user_tz":-330,"elapsed":45,"user":{"displayName":"M. Praneeth","userId":"01426730292304144613"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"723401da-ff7e-4f2b-e4c7-1c1799d979ff"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["LABEL\n","piano              153\n","electric_guitar    144\n","Name: count, dtype: int64\n","['electric_guitar', 'piano']\n"]}]},{"cell_type":"markdown","source":["### Encoding Structure\n","- We are encoding the labels in alphabetical order.\n","- electric_guitar gets 0 while piano gets 1."],"metadata":{"id":"g8BIOS3tc4a-"}},{"cell_type":"code","source":["# convert into numbers\n","data_train[\"LABEL\"] = pd.factorize(data_train[\"LABEL\"], sort = True)[0]\n","data_train[\"LABEL\"].value_counts()"],"metadata":{"id":"3YuTvBrhcdPp","executionInfo":{"status":"ok","timestamp":1718860805088,"user_tz":-330,"elapsed":37,"user":{"displayName":"M. Praneeth","userId":"01426730292304144613"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"77a9c423-4470-4129-dc21-344871932a50"},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LABEL\n","1    153\n","0    144\n","Name: count, dtype: int64"]},"metadata":{},"execution_count":22}]},{"cell_type":"markdown","source":["### Seperate features and labels\n","- Label is at the last index which we can reference by -1"],"metadata":{"id":"8DMnRrFQaBRf"}},{"cell_type":"code","source":["# get all features without the labels\n","# all the rows\n","# all the columns without the last column\n","X = data_train.iloc[:, :-1].values\n","# all rows\n","# only the lastb column, which is the label\n","Y = data_train.iloc[:, -1].values"],"metadata":{"id":"KSqIZACfZ26N","executionInfo":{"status":"ok","timestamp":1718860805088,"user_tz":-330,"elapsed":29,"user":{"displayName":"M. Praneeth","userId":"01426730292304144613"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["Y = data_train.iloc[:, -1].values\n","Y"],"metadata":{"id":"BLz3sPHLDbre","executionInfo":{"status":"ok","timestamp":1718860805088,"user_tz":-330,"elapsed":28,"user":{"displayName":"M. Praneeth","userId":"01426730292304144613"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"d081282e-8890-48ae-ddd3-e7fe9705a65c"},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0,\n","       1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1,\n","       1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,\n","       1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1,\n","       0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0,\n","       1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1,\n","       0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1,\n","       0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0,\n","       1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,\n","       1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1,\n","       1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0,\n","       1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1,\n","       0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1,\n","       0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1])"]},"metadata":{},"execution_count":24}]},{"cell_type":"markdown","source":["### Train the Model using Cross Validation"],"metadata":{"id":"NiB8dna9bo3B"}},{"cell_type":"code","source":["\n","from sklearn.model_selection import KFold\n","from sklearn.metrics import accuracy_score, precision_score, recall_score\n","import numpy as np\n","\n","def cross_validation(model, data = (X, Y), splits = 5):\n","    kf = KFold(n_splits=splits, shuffle=True, random_state=42)\n","\n","    # Perform k-fold cross-validation\n","    accuracy = []\n","    precision = []\n","    recall = []\n","\n","    for train_index, valid_index in kf.split(data[0]):\n","        X_train, X_valid = data[0][train_index], data[0][valid_index]\n","        y_train, y_valid = data[1][train_index], data[1][valid_index]\n","\n","        # Fit the defined model\n","        model.fit(X_train, y_train)\n","\n","        # Make predictions on the test data\n","        y_pred = model.predict(X_valid)\n","\n","        # Calculate accuracy, precision and recall\n","        accuracy.append(accuracy_score(y_pred, y_valid))\n","        precision.append(precision_score(y_pred, y_valid))\n","        recall.append(recall_score(y_pred, y_valid))\n","\n","\n","    # get arrays\n","    accuracy_set = np.array(accuracy)\n","    precision_set = np.array(precision)\n","    recall_set = np.array(recall)\n","\n","    print(\"Mean Accuracy: {}\".format(accuracy_set.mean()))\n","    print(\"Mean Precision: {}\".format(precision_set.mean()))\n","    print(\"Mean Recall: {}\".format(recall_set.mean()))"],"metadata":{"id":"a5_vkXLMabZL","executionInfo":{"status":"ok","timestamp":1718860805089,"user_tz":-330,"elapsed":21,"user":{"displayName":"M. Praneeth","userId":"01426730292304144613"}}},"execution_count":25,"outputs":[]},{"cell_type":"markdown","source":["### Logistic Regression"],"metadata":{"id":"tuNt3Cr6mM7L"}},{"cell_type":"code","source":["from sklearn.linear_model import LogisticRegression\n","\n","# fit the logistic regression\n","lr = LogisticRegression()\n","\n","cross_validation(lr)"],"metadata":{"id":"F1WXgwptmPc6","executionInfo":{"status":"ok","timestamp":1718860805089,"user_tz":-330,"elapsed":20,"user":{"displayName":"M. Praneeth","userId":"01426730292304144613"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"0a16bb7a-31d5-4bf2-aa80-c98fb954454e"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["Mean Accuracy: 0.8284180790960451\n","Mean Precision: 0.8624404368216938\n","Mean Recall: 0.8119029704146336\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n"]}]},{"cell_type":"markdown","source":["### KNN"],"metadata":{"id":"JHa3J7QacGM7"}},{"cell_type":"code","source":["from sklearn.neighbors import KNeighborsClassifier\n","\n","# Use 5-fold cross validation for hyper-parameter tuning\n","# Try out different values and choose the best hyper-parameters\n","knn = KNeighborsClassifier(n_neighbors=7)\n","\n","cross_validation(knn)"],"metadata":{"id":"Uf8phNY0bnWh","executionInfo":{"status":"ok","timestamp":1718860805862,"user_tz":-330,"elapsed":784,"user":{"displayName":"M. Praneeth","userId":"01426730292304144613"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"2af9a878-32c0-44b6-e98c-953ab1617622"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["Mean Accuracy: 0.7911864406779662\n","Mean Precision: 0.7830197341390333\n","Mean Recall: 0.7994856087759313\n"]}]},{"cell_type":"markdown","source":["### Random Forest"],"metadata":{"id":"DeuiCypgmhG2"}},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestClassifier\n","\n","# Use 5-fold cross validation for hyper-parameter tuning\n","# Try out different values and choose the best hyper-parameters\n","rf = RandomForestClassifier()\n","\n","cross_validation(rf)"],"metadata":{"id":"nLqScr92mlC1","executionInfo":{"status":"ok","timestamp":1718860809170,"user_tz":-330,"elapsed":3311,"user":{"displayName":"M. Praneeth","userId":"01426730292304144613"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"f4c7fa95-351d-4c2d-cda2-cb93d9f79273"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["Mean Accuracy: 0.8350282485875706\n","Mean Precision: 0.8716128531200834\n","Mean Recall: 0.811937941998794\n"]}]},{"cell_type":"markdown","source":["### Fit the best model\n","\n","- Select the best model having the highest cross validation accuracy"],"metadata":{"id":"oZXfRpcgm6lC"}},{"cell_type":"code","source":["# Model with the lowest RMSE or highest r2\n","best_model = RandomForestClassifier()\n","\n","# Fit the model on the full training dataset\n","best_model.fit(X, Y)"],"metadata":{"id":"fjYmgy_Rm71f","executionInfo":{"status":"ok","timestamp":1718860810048,"user_tz":-330,"elapsed":882,"user":{"displayName":"M. Praneeth","userId":"01426730292304144613"}},"colab":{"base_uri":"https://localhost:8080/","height":74},"outputId":"3454cda0-6950-44ce-f478-cbb49436df94"},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier()"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":29}]},{"cell_type":"markdown","source":["### Load the test data"],"metadata":{"id":"uFFO9-FunNo1"}},{"cell_type":"code","source":["# load the test data\n","data_test = pd.read_csv(TEST_CSV)\n","data_test.head()"],"metadata":{"id":"UQ4DhtLsnPNP","executionInfo":{"status":"ok","timestamp":1718860810049,"user_tz":-330,"elapsed":29,"user":{"displayName":"M. Praneeth","userId":"01426730292304144613"}},"colab":{"base_uri":"https://localhost:8080/","height":253},"outputId":"2a9336fb-7b93-4e50-c7b4-f7f51d335abd"},"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       RMSE  SPECTRAL_CENTROID  SPECTRAL_BANDWIDTH      ROLLOFF  \\\n","0  0.026849         832.086593          810.192938  1329.012733   \n","1  0.206735         907.941817         1192.034489  1882.995793   \n","2  0.127130        1575.713245         1660.819435  3097.551270   \n","3  0.091557        1349.112548         1824.864434  2982.762733   \n","4  0.098121        2161.061507         2520.661924  4807.536058   \n","\n","   ZERO_CROSSING_RATE  MFCC_FEATURE_0  MFCC_FEATURE_1  MFCC_FEATURE_2  \\\n","0            0.060761      -397.64313      202.891080      -18.314198   \n","1            0.041305      -173.60980      176.481120      -17.487156   \n","2            0.082715      -152.60316      131.967160      -38.519390   \n","3            0.043472      -191.74979      126.553510      -14.354351   \n","4            0.077603      -143.44803       86.847534        3.254393   \n","\n","   MFCC_FEATURE_3  MFCC_FEATURE_4  ...  MFCC_FEATURE_11  MFCC_FEATURE_12  \\\n","0        4.595671        7.464968  ...        -8.863886        -3.232259   \n","1       64.209940       12.764759  ...         0.397927        -0.608402   \n","2       26.204031       -2.906238  ...        -7.109600       -21.862885   \n","3       44.730534        6.745143  ...        -0.156913        -4.892558   \n","4       34.360985       25.463150  ...         5.298623         6.359572   \n","\n","   MFCC_FEATURE_13  MFCC_FEATURE_14  MFCC_FEATURE_15  MFCC_FEATURE_16  \\\n","0        -2.563379        -0.046393         2.097677        -5.204055   \n","1         5.595345         6.094729        -0.741953        -0.132119   \n","2       -18.213646       -12.271697        -6.269111       -10.996242   \n","3        -2.856394        -1.636412        -1.651337        -9.099241   \n","4         7.874352        -3.941005        -5.958016        -8.297595   \n","\n","   MFCC_FEATURE_17  MFCC_FEATURE_18  MFCC_FEATURE_19            LABEL  \n","0        -7.896916        -1.224250        -2.038627            piano  \n","1         3.050113         3.534066         2.216849  electric_guitar  \n","2        -6.022158        -9.656895        -3.849789            piano  \n","3        -1.596109        -5.335640        -3.951504            piano  \n","4       -10.491979        -5.848084         7.938865            piano  \n","\n","[5 rows x 26 columns]"],"text/html":["\n","  <div id=\"df-3ad601a3-ccef-4c65-aba8-7e4659d35766\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>RMSE</th>\n","      <th>SPECTRAL_CENTROID</th>\n","      <th>SPECTRAL_BANDWIDTH</th>\n","      <th>ROLLOFF</th>\n","      <th>ZERO_CROSSING_RATE</th>\n","      <th>MFCC_FEATURE_0</th>\n","      <th>MFCC_FEATURE_1</th>\n","      <th>MFCC_FEATURE_2</th>\n","      <th>MFCC_FEATURE_3</th>\n","      <th>MFCC_FEATURE_4</th>\n","      <th>...</th>\n","      <th>MFCC_FEATURE_11</th>\n","      <th>MFCC_FEATURE_12</th>\n","      <th>MFCC_FEATURE_13</th>\n","      <th>MFCC_FEATURE_14</th>\n","      <th>MFCC_FEATURE_15</th>\n","      <th>MFCC_FEATURE_16</th>\n","      <th>MFCC_FEATURE_17</th>\n","      <th>MFCC_FEATURE_18</th>\n","      <th>MFCC_FEATURE_19</th>\n","      <th>LABEL</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.026849</td>\n","      <td>832.086593</td>\n","      <td>810.192938</td>\n","      <td>1329.012733</td>\n","      <td>0.060761</td>\n","      <td>-397.64313</td>\n","      <td>202.891080</td>\n","      <td>-18.314198</td>\n","      <td>4.595671</td>\n","      <td>7.464968</td>\n","      <td>...</td>\n","      <td>-8.863886</td>\n","      <td>-3.232259</td>\n","      <td>-2.563379</td>\n","      <td>-0.046393</td>\n","      <td>2.097677</td>\n","      <td>-5.204055</td>\n","      <td>-7.896916</td>\n","      <td>-1.224250</td>\n","      <td>-2.038627</td>\n","      <td>piano</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.206735</td>\n","      <td>907.941817</td>\n","      <td>1192.034489</td>\n","      <td>1882.995793</td>\n","      <td>0.041305</td>\n","      <td>-173.60980</td>\n","      <td>176.481120</td>\n","      <td>-17.487156</td>\n","      <td>64.209940</td>\n","      <td>12.764759</td>\n","      <td>...</td>\n","      <td>0.397927</td>\n","      <td>-0.608402</td>\n","      <td>5.595345</td>\n","      <td>6.094729</td>\n","      <td>-0.741953</td>\n","      <td>-0.132119</td>\n","      <td>3.050113</td>\n","      <td>3.534066</td>\n","      <td>2.216849</td>\n","      <td>electric_guitar</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.127130</td>\n","      <td>1575.713245</td>\n","      <td>1660.819435</td>\n","      <td>3097.551270</td>\n","      <td>0.082715</td>\n","      <td>-152.60316</td>\n","      <td>131.967160</td>\n","      <td>-38.519390</td>\n","      <td>26.204031</td>\n","      <td>-2.906238</td>\n","      <td>...</td>\n","      <td>-7.109600</td>\n","      <td>-21.862885</td>\n","      <td>-18.213646</td>\n","      <td>-12.271697</td>\n","      <td>-6.269111</td>\n","      <td>-10.996242</td>\n","      <td>-6.022158</td>\n","      <td>-9.656895</td>\n","      <td>-3.849789</td>\n","      <td>piano</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.091557</td>\n","      <td>1349.112548</td>\n","      <td>1824.864434</td>\n","      <td>2982.762733</td>\n","      <td>0.043472</td>\n","      <td>-191.74979</td>\n","      <td>126.553510</td>\n","      <td>-14.354351</td>\n","      <td>44.730534</td>\n","      <td>6.745143</td>\n","      <td>...</td>\n","      <td>-0.156913</td>\n","      <td>-4.892558</td>\n","      <td>-2.856394</td>\n","      <td>-1.636412</td>\n","      <td>-1.651337</td>\n","      <td>-9.099241</td>\n","      <td>-1.596109</td>\n","      <td>-5.335640</td>\n","      <td>-3.951504</td>\n","      <td>piano</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.098121</td>\n","      <td>2161.061507</td>\n","      <td>2520.661924</td>\n","      <td>4807.536058</td>\n","      <td>0.077603</td>\n","      <td>-143.44803</td>\n","      <td>86.847534</td>\n","      <td>3.254393</td>\n","      <td>34.360985</td>\n","      <td>25.463150</td>\n","      <td>...</td>\n","      <td>5.298623</td>\n","      <td>6.359572</td>\n","      <td>7.874352</td>\n","      <td>-3.941005</td>\n","      <td>-5.958016</td>\n","      <td>-8.297595</td>\n","      <td>-10.491979</td>\n","      <td>-5.848084</td>\n","      <td>7.938865</td>\n","      <td>piano</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows Ã— 26 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3ad601a3-ccef-4c65-aba8-7e4659d35766')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3ad601a3-ccef-4c65-aba8-7e4659d35766 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3ad601a3-ccef-4c65-aba8-7e4659d35766');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e9596e18-8c44-4b34-91e8-edbc9d0144e6\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e9596e18-8c44-4b34-91e8-edbc9d0144e6')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e9596e18-8c44-4b34-91e8-edbc9d0144e6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data_test"}},"metadata":{},"execution_count":30}]},{"cell_type":"markdown","source":["### Encode the test data as well"],"metadata":{"id":"c2zC3BOLqczw"}},{"cell_type":"code","source":["# encode the labels\n","data_test[\"LABEL\"] = pd.factorize(data_test[\"LABEL\"], sort = True)[0]\n","data_test[\"LABEL\"].value_counts()"],"metadata":{"id":"Hs3NWnpkoYT-","executionInfo":{"status":"ok","timestamp":1718860810049,"user_tz":-330,"elapsed":27,"user":{"displayName":"M. Praneeth","userId":"01426730292304144613"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"b3560122-f4eb-49c3-e2c7-ab11329a587f"},"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LABEL\n","1    153\n","0    144\n","Name: count, dtype: int64"]},"metadata":{},"execution_count":31}]},{"cell_type":"markdown","source":["### Seperate features and labels"],"metadata":{"id":"U5awlupfqfYY"}},{"cell_type":"code","source":["# all the rows\n","# all the columns without the last column\n","x_test = data_test.iloc[:, : -1]\n","# all rows\n","# only the lastb column, which is the label\n","y_test = data_test.iloc[:, -1]"],"metadata":{"id":"X9-2tBt8nWuU","executionInfo":{"status":"ok","timestamp":1718860810050,"user_tz":-330,"elapsed":20,"user":{"displayName":"M. Praneeth","userId":"01426730292304144613"}}},"execution_count":32,"outputs":[]},{"cell_type":"markdown","source":["### Use the best model to make predictions"],"metadata":{"id":"NI8BrkzJq1Wz"}},{"cell_type":"code","source":["# make predictions\n","predictions = best_model.predict(x_test)\n","print(predictions)"],"metadata":{"id":"aCc0qiosq3bb","executionInfo":{"status":"ok","timestamp":1718860810050,"user_tz":-330,"elapsed":19,"user":{"displayName":"M. Praneeth","userId":"01426730292304144613"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"91830dce-b8cd-4942-a788-43d610317a57"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["[1 0 1 1 1 1 1 1 1 0 1 1 0 1 0 1 1 0 0 1 0 0 1 1 0 0 1 0 0 1 0 1 0 0 1 1 1\n"," 0 1 0 1 0 0 1 1 1 1 1 1 1 0 0 1 1 0 1 0 0 0 0 1 0 0 0 0 1 1 0 1 0 0 1 1 0\n"," 1 0 0 1 0 0 1 1 1 1 1 1 0 1 0 1 1 0 0 0 0 1 1 1 0 1 0 0 0 1 1 0 1 1 1 0 1\n"," 1 1 0 1 1 1 0 1 0 1 0 0 0 0 1 1 0 0 1 0 1 0 0 0 1 1 0 0 0 0 1 1 1 1 1 1 1\n"," 1 1 0 1 0 1 0 0 0 1 1 1 1 1 1 0 1 1 1 0 0 1 0 0 1 1 1 0 1 1 1 1 0 0 1 0 0\n"," 1 1 1 1 0 1 0 0 1 0 0 0 0 1 0 0 1 1 1 0 0 1 1 0 1 0 1 1 0 0 0 0 0 1 1 1 0\n"," 0 1 0 0 1 0 1 0 0 1 0 0 0 0 0 1 0 1 1 0 1 0 1 1 1 1 1 1 0 1 1 0 1 0 0 0 1\n"," 0 0 1 1 1 0 1 0 0 0 0 0 0 1 0 0 1 1 1 0 1 0 0 0 0 1 1 0 1 0 0 0 0 0 0 1 0\n"," 1]\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n"]}]},{"cell_type":"markdown","source":["### Evaluate the test data"],"metadata":{"id":"qmT4zo0krAeT"}},{"cell_type":"code","source":["#evaluation function\n","\n","def model_evaluations(y_true, y_pred, labels):\n","  import matplotlib.pyplot as plt\n","  import seaborn as sns\n","  from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n","\n","  acc_score = accuracy_score(y_true, y_pred)\n","  print(\"Accuracy score: {}\\n\".format(acc_score))\n","\n","  print(\"Classification Report: {}\".format(classification_report(y_true, y_pred)))\n","\n","  plt.figure(figsize = (5, 5))\n","  sns.heatmap(confusion_matrix(y_true, y_pred),  annot = True, fmt=\"g\", cmap = \"Blues\", xticklabels = labels, yticklabels = labels)\n","  plt.title(\"Consfuion Matrix\")\n","  plt.show()\n"],"metadata":{"id":"CoZTbD-1q80i","executionInfo":{"status":"ok","timestamp":1718860810050,"user_tz":-330,"elapsed":11,"user":{"displayName":"M. Praneeth","userId":"01426730292304144613"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","source":["# run the evaluation functions\n","model_evaluations(y_test, predictions, LABELS)"],"metadata":{"id":"gfssPUtStA9s","executionInfo":{"status":"ok","timestamp":1718860811201,"user_tz":-330,"elapsed":1161,"user":{"displayName":"M. Praneeth","userId":"01426730292304144613"}},"colab":{"base_uri":"https://localhost:8080/","height":655},"outputId":"19a8814d-a5c1-4aa5-f85a-953dfc23e3dd"},"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy score: 1.0\n","\n","Classification Report:               precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00       144\n","           1       1.00      1.00      1.00       153\n","\n","    accuracy                           1.00       297\n","   macro avg       1.00      1.00      1.00       297\n","weighted avg       1.00      1.00      1.00       297\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 500x500 with 2 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAawAAAHDCAYAAAB4ai4jAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABCM0lEQVR4nO3de1zO9/8/8MeV6rrS+aCTjw7KKOezlkmTJWYam2VGYjKTU45tyyG2xkiKycaIDz5m5rwh5yFJlOOMRBsKkXRQ6Xr//vB1/XapqKt35a3HfbfrdnO93q/3+3q+Y56ez/fr/b5kgiAIICIiesVp1XYAREREFcGERUREksCERUREksCERUREksCERUREksCERUREksCERUREksCERUREksCERUREksCERa+E3bt3o02bNlAoFJDJZMjOzq7wvtevX4dMJsPq1aurLT6p6d69O7p3717bYRCJigmrjkhNTcWoUaPQuHFjKBQKGBkZwd3dHYsXL0ZBQUGtxpaVlYWBAwdCT08PS5cuxdq1a6Gvr1+rMVXUsGHDIJPJYGRkVObP8cqVK5DJZJDJZFiwYEGlj3/r1i3MmjULycnJIkRLJG3atR0AVb9du3bhww8/hFwux9ChQ9GiRQsUFRXh6NGjmDJlCi5cuIAffvih1uJLTEzEo0ePMGfOHHh5eVV6f3t7exQUFEBHR6caons5bW1t5OfnY8eOHRg4cKDatnXr1kGhUODx48caHfvWrVuYPXs2HBwc0KZNmwrvt3fvXo0+j+hVxoT1mktLS4Ofnx/s7e1x4MAB2NjYqLaNGTMGV69exa5du2oxQuDOnTsAABMTE432l8lkUCgUIkZUOXK5HO7u7tiwYUOphLV+/Xr06dMHmzdvrpFY8vPzUb9+fejq6tbI5xHVJLYEX3Pz589Hbm4uVq5cqZasnnF2dsb48eNV7588eYI5c+bAyckJcrkcDg4O+OKLL1BYWKi2n4ODA959910cPXoUnTp1gkKhQOPGjbFmzRq1ecXFxZg9ezaaNGkChUIBc3NzdO3aFXFxcQCeXmvx9/cHAHTs2BEymQzDhg1TfcazX//b89dnyruGdeDAAbz11lvQ19eHiYkJ+vXrh0uXLqnNmTVrFmQyGa5evYphw4bBxMQExsbGCAgIQH5+/gt/tv/28ccf4/fff1e79paYmIgrV67g448/LjX//v37mDx5Mlq2bAkDAwMYGRnBx8cHKSkpqjmHDh1Cx44dAQABAQGq1uKz8+zevTtatGiBpKQkdOvWDfXr18cXX3xR5s/I398fCoWi1Pl7e3vD1NQUt27dqvC5EtUWJqzX3I4dO9C4cWO8+eabFZr/6aefYsaMGWjXrh0WLVoEDw8PhIeHw8/Pr9Tcq1ev4oMPPkDPnj2xcOFCmJqaYtiwYbhw4YJqzqxZszB79mx4enpiyZIl+PLLL2FnZ4fTp08DAL788ksEBgYCAMLCwrB27VqMGjWqyue9b98+eHt7486dO5g1axaCg4Nx/PhxuLu74/r166XmDxw4EI8ePUJ4eDgGDhyI1atXY/bs2RX+vP79+0Mmk+HXX39Vja1fvx7NmjVDu3btSs2/du0atm7dinfffRcRERGYMmUKzp07Bw8PD1XycHFxQVhYGAAgMDAQa9euxdq1a9GtWzfVcbKysuDj44M2bdogMjISnp6eZca3ePFiNGjQAP7+/igpKQEALF++HHv37kV0dDRsbW0rfK5EtUag19bDhw8FAEK/fv0qND85OVkAIHz66adq45MnTxYACAcOHFCN2dvbCwCEI0eOqMbu3LkjyOVyYdKkSaqx1q1bC3369Hnh565atUoAICQmJqqN29vbC/7+/qXme3h4CB4eHqr3aWlpAgBh1apVqrE2bdoIlpaWQlZWlmosJSVF0NLSEoYOHaoamzlzpgBAGD58uNpnvP/++4K5ufkL4xYEQfD39xf09fUFQRCEDz74QOjRo4cgCIJQUlIiWFtbC7Nnz1bF991336n2e/z4sVBSUqJ2rLS0NEEulwthYWGqscTExFLn9u+fAwAhJiamzG3//hkJgiDs2bNHACDMnTtXuHbtmmBgYCD4+vq+9ByJXhWssF5jOTk5AABDQ8MKzf/tt98AAMHBwWrjkyZNAoBS17pcXV3x1ltvqd43aNAATZs2xbVr11RjJiYmuHDhAq5cuVL5E9DQ7du3kZycjGHDhsHMzEw13qpVK/Ts2VN1nv/22Wefqb1/6623kJWVpfoZVsTHH3+MQ4cOISMjAwcOHEBGRkaZ7UDg6XUvLa2n//uVlJQgKysLBgYGaNq0qar6rAi5XI6AgIAKzX3nnXcwatQohIWFoX///lAoFFi+fHmFP4uotjFhvcaMjIwAAI8eParQ/Bs3bkBLSwvOzs5q49bW1jAxMcGNGzfUxu3s7Eodw9TUFA8ePFC9DwsLQ3Z2Nt544w20bNkSU6ZMwdmzZyt7KpXyLM6mTZuW2ubi4oJ79+4hLy9Pbfz5czE1NQUAtXN5md69e8PQ0BAbN27EunXr0LFjx1I/y2eUSiUWLVqEJk2aQC6Xw8LCAg0aNMDZs2fx8OHDCn9mw4YNK7XAYsGCBTAzM0NycjKioqJgaWlZ4X2JahsT1mvMyMgItra2OH/+fKX2k8lkFZpXr169MscFQVD9ulu3bkhNTcVPP/2EFi1aYMWKFWjXrh1WrFihcRzPrsGIqSLn8jJyuRz9+/dHbGwstmzZUm51BQDffPMNgoOD0a1bN/z3v//Fnj17EBcXh+bNm0OpVFb4M/X09Co8FwDOnDmjWpV57ty5Su1LVNuYsF5z7777LlJTUxEfH//Sufb29lAqlaXad5mZmcjOzoa9vb1GMZiZmSEgIAAbNmzA33//jVatWmHWrFkv3c/U1LTMJ148X+k971mcly9fLrXtzz//hIWFRbXdmPzxxx/jzJkzePToUZkLVZ755Zdf4OnpiZUrV8LPzw/vvPMOvLy8Sp1vRf/xUBF5eXkICAiAq6srAgMDMX/+fCQmJop2fKLqxoT1mps6dSr09fXx6aefIjMzs9T21NRULF68GMDTlhYAREZGqs2JiIgAAPTp06fSn5+VlaX23sDAAM7OzqWWyZfFyckJJ06cQFFRkWps586d+Pvvv1+4n42NDdq0aYPY2Fi1BHD+/Hns3btXdZ7VwdPTE3PmzMGSJUtgbW1d7rx69eqVqt42bdqEmzdvqo09S6yVeVRVeaZNm4b09HTExsYiIiICDg4O8Pf3r9DvBdGrgDcOv+acnJywfv16fPTRR3BxcVF70sXx48exadMm1b1OrVu3hr+/P3744QdkZ2fDw8MDJ0+eRGxsLHx9fctdMv0irq6u6N69O9q3bw8zMzOcOnUKv/zyC4KCgl6676effopffvkFvXr1wsCBA5Gamor//ve/cHJyeum+3333HXx8fODm5oYRI0agoKAA0dHRMDY2rlB1pyktLS189dVXL5337rvvIiwsDAEBAXjzzTdx7tw5rFu3Do0bN1ab5+TkBBMTE8TExMDQ0BD6+vro3LkzHB0dKxXXgQMH8P3332PmzJmqZfarVq1C9+7dERoaivnz51fqeES1opZXKVIN+euvv4SRI0cKDg4Ogq6urmBoaCi4u7sL0dHRwuPHj1XziouLhdmzZwuOjo6Cjo6O0KhRIyEkJERtjiA8XXJe1nL155dTz507V+jUqZNgYmIi6OnpCc2aNRO+/vproaioSDWnvGXtgiAICxcuFBo2bCjI5XLB3d1dOHXqVIWWtQuCIOzbt09wd3cX9PT0BCMjI6Fv377CxYsX1eY8W9Z+9+5dtfFnMaWlpZX3IxUEQX1Ze3nKW9Y+adIkwcbGRtDT0xPc3d2F+Pj4Mpejb9u2TXB1dRW0tbXVztPDw0No3rx5mZ/57+Pk5OQI9vb2Qrt27YTi4mK1eRMnThS0tLSE+Pj4F54D0atAJgiVuKpMRERUS3gNi4iIJIEJi4iIJIEJi4iIJIEJi4iIJIEJi4iIJIEJi4iIJIEJi4iIJOGVedKFnuec2g6B6ogHcaG1HQLVEQoR/4bVa/vyp8NUVMGZJaIdqyaxwiIiIkl4ZSosIiJ6ARnrCyYsIiIpEPGrZqSKKZuIiCSBFRYRkRSwJciERUQkCWwJsiVIRETSwAqLiEgK2BJkwiIikgS2BNkSJCIiaWCFRUQkBWwJMmEREUkCW4JsCRIRkTSwwiIikgK2BJmwiIgkgS1BtgSJiEgaWGEREUkBW4JMWEREksCWIFuCREQkDaywiIikgC1BJiwiIklgwmJLkIiIpIEVFhGRFGhx0QUTFhGRFLAlyJYgERFJAyssIiIp4H1YTFhERJLAliBbgkREJA1MWEREUiCTifeqpCNHjqBv376wtbWFTCbD1q1by5372WefQSaTITIyUm38/v37GDx4MIyMjGBiYoIRI0YgNze3UnEwYRERSYFMS7xXJeXl5aF169ZYunTpC+dt2bIFJ06cgK2tbaltgwcPxoULFxAXF4edO3fiyJEjCAwMrFQcvIZFREQv5OPjAx8fnxfOuXnzJsaOHYs9e/agT58+atsuXbqE3bt3IzExER06dAAAREdHo3fv3liwYEGZCa4srLCIiKRAxJZgYWEhcnJy1F6FhYUah6ZUKjFkyBBMmTIFzZs3L7U9Pj4eJiYmqmQFAF5eXtDS0kJCQkKFP4cJi4hICkRsCYaHh8PY2FjtFR4ernFo8+bNg7a2NsaNG1fm9oyMDFhaWqqNaWtrw8zMDBkZGRX+HLYEiYjqmJCQEAQHB6uNyeVyjY6VlJSExYsX4/Tp05BV871irLCIiKRAxJagXC6HkZGR2kvThPXHH3/gzp07sLOzg7a2NrS1tXHjxg1MmjQJDg4OAABra2vcuXNHbb8nT57g/v37sLa2rvBnscIiIpKCV/TG4SFDhsDLy0ttzNvbG0OGDEFAQAAAwM3NDdnZ2UhKSkL79u0BAAcOHIBSqUTnzp0r/FlMWERE9EK5ubm4evWq6n1aWhqSk5NhZmYGOzs7mJubq83X0dGBtbU1mjZtCgBwcXFBr169MHLkSMTExKC4uBhBQUHw8/Or8ApBgAmLiEgaavFZgqdOnYKnp6fq/bPrX/7+/li9enWFjrFu3ToEBQWhR48e0NLSwoABAxAVFVWpOJiwiIikoBZbgt27d4cgCBWef/369VJjZmZmWL9+fZXieDWbokRERM9hhUVEJAWv6KKLmsSERUQkBfw+LLYEiYhIGlhhERFJAVuCTFhERJLAliBbgkREJA2ssIiIpIAtwcpXWMXFxRg+fDjS0tKqIx4iIiqLiA+/lapKJywdHR1s3ry5OmIhIiIql0Y1pq+vL7Zu3SpyKEREVB6ZTCbaS6o0uobVpEkThIWF4dixY2jfvj309fXVtpf3rZNERKQZKScasWiUsFauXAkTExMkJSUhKSlJbZtMJmPCIiIi0WmUsLjggoiohrHA4rJ2IiIpYEuwCgnrn3/+wfbt25Geno6ioiK1bREREVUOjIiI6N80Slj79+/He++9h8aNG+PPP/9EixYtcP36dQiCgHbt2okdIxFRnccKS8Nl7SEhIZg8eTLOnTsHhUKBzZs34++//4aHhwc+/PBDsWMkIqrzuKxdw4R16dIlDB06FACgra2NgoICGBgYICwsDPPmzRM1QCIiIkDDhKWvr6+6bmVjY4PU1FTVtnv37okTGRERqbDC0vAaVpcuXXD06FG4uLigd+/emDRpEs6dO4dff/0VXbp0ETtGIiKSbp4RjUYJKyIiArm5uQCA2bNnIzc3Fxs3bkSTJk24QpCIiKqFRgmrcePGql/r6+sjJiZGtICIiKg0KbfyxKLRNazGjRsjKyur1Hh2drZaMiMiInHwGpaGCev69esoKSkpNV5YWIibN29WOSgiIqLnVaoluH37dtWv9+zZA2NjY9X7kpIS7N+/Hw4ODqIFR0RET0m5MhJLpRKWr68vgKc/OH9/f7VtOjo6cHBwwMKFC0ULjoiInmLCqmTCUiqVAABHR0ckJibCwsKiWoIiIiJ6Hr9ehIhIClhgVTxhRUVFITAwEAqFAlFRUS+cyy9wJCISF1uClUhYixYtwuDBg6FQKLBo0aJy5/Ebh4mIqDpUOGH9uw3IliARUc1ihcVvHCYikgQmLA0T1vDhw1+4/aefftIoGCIiovJolLAePHig9r64uBjnz59HdnY23n77bVECIyKif2GBpVnC2rJlS6kxpVKJ0aNHw8nJqcpBERGROrYENXyWYJkH0tJCcHDwC1cQEhERaUrURRepqal48uSJmIckIiKwwgI0TFjBwcFq7wVBwO3bt7Fr165SzxgkIqKqY8LSsCV45swZtdfZs2cBAAsXLkRkZKSY8RERUS07cuQI+vbtC1tbW8hkMmzdulW1rbi4GNOmTUPLli2hr68PW1tbDB06FLdu3VI7xv379zF48GAYGRnBxMQEI0aMUH1zfUVpVGEdPHhQk92IiEhDtVlh5eXloXXr1hg+fDj69++vti0/Px+nT59GaGgoWrdujQcPHmD8+PF47733cOrUKdW8wYMH4/bt24iLi0NxcTECAgIQGBiI9evXVzgO3jhMRCQFtdgR9PHxgY+PT5nbjI2NERcXpza2ZMkSdOrUCenp6bCzs8OlS5ewe/duJCYmokOHDgCA6Oho9O7dGwsWLICtrW2F4tAoYbVt27bMbC+TyaBQKODs7Ixhw4bB09NTk8MTEVE1KiwsRGFhodqYXC6HXC4X5fgPHz6ETCaDiYkJACA+Ph4mJiaqZAUAXl5e0NLSQkJCAt5///0KHVeja1i9evXCtWvXoK+vD09PT3h6esLAwACpqano2LEjbt++DS8vL2zbtk2TwxMR0XNkMplor/DwcBgbG6u9wsPDRYnz8ePHmDZtGgYNGgQjIyMAQEZGBiwtLdXmaWtrw8zMDBkZGRU+tkYV1r179zBp0iSEhoaqjc+dOxc3btzA3r17MXPmTMyZMwf9+vXT5COIiOhfxLyGFRISUmq1txjVVXFxMQYOHAhBELBs2bIqH+95GlVYP//8MwYNGlRq3M/PDz///DMAYNCgQbh8+XLVoiMiItHJ5XIYGRmpvaqasJ4lqxs3biAuLk5VXQGAtbU17ty5ozb/yZMnuH//PqytrSv8GRolLIVCgePHj5caP378OBQKBYCnj2p69msiIqoaMVuCYnuWrK5cuYJ9+/bB3Nxcbbubmxuys7ORlJSkGjtw4ACUSiU6d+5c4c/RqCU4duxYfPbZZ0hKSkLHjh0BAImJiVixYgW++OILAMCePXvQpk0bTQ5PRETPq8VVgrm5ubh69arqfVpaGpKTk2FmZgYbGxt88MEHOH36NHbu3ImSkhLVdSkzMzPo6urCxcUFvXr1wsiRIxETE4Pi4mIEBQXBz8+vwisEAUAmCIKgyQmsW7cOS5YsUbX9mjZtirFjx+Ljjz8GABQUFKhWDVaEnuccTcIgqrQHcaEvn0QkAoWINw41ChJvEdvfSyq3tuDQoUNlrvr29/fHrFmz4OjoWOZ+Bw8eRPfu3QE8vXE4KCgIO3bsgJaWFgYMGICoqCgYGBhUOA6NE1ZFbNiwAe+99x709fVfOpcJi2oKExbVFDETlt3Y7aIdKz36PdGOVZNEe1p7WUaNGoXMzMzq/AgiojrhVb6GVVOqNWFVY/H22nJvZYdfvv4I1zZNQMHBUPR1b1ru3KiJvVFwMBRBAzqVuV1Xpx5O/DgSBQdD0crJqrpCptfc/9avg0/Pt9GxbUsM9vsQ5/7v2aFENa1aExZVnr5CB+dSMzFh8e8vnPde16bo5NoQt+7mlDvnm1E9cPveI7FDpDpk9++/YcH8cIz6fAz+t2kLmjZthtGjRiArK6u2Q6tzWGExYb1y9p5MxeyfDmH70fLvYbO1METEuF4I+HorikuUZc55p5MTenRwQkjMvuoKleqAtbGr0P+DgfB9fwCcnJ3x1czZUCgU2Prr5toOrc5hwmLCkhyZDFgZ0g+LNsbj0vW7Zc6xNNXH95PfxYhvtiL/cXENR0ivi+KiIly6eAFd3N5UjWlpaaFLlzdxNuVMLUZGdVWtPK29rAcvCsonkGnx4fEvM2mQO56UKLF088ly5/ww7T38uD0Jp/+6DTsr4xqMjl4nD7IfoKSkpNRNoObm5khLu1ZLUdVh0i2MRFOtFZa9vT10dHRKjZf14MUnN45UZyivhbZvWGPMgE4InFf+8tbP+3eEYX1dfLf+WA1GRkTVjS1BDSusxMTEMh+pkZCQgHr16qkeIX/+/Pky9y/rwYuWfRdqEkqd4t7SDpYm+vhr43jVmHY9LXw7uieCPuiMZoOi0b2tIzq7/gcP936htu+x5Z/if/vOYeS34t3LQa83UxNT1KtXr9QCi6ysLFhYWNRSVFSXaZSwxowZg6lTp5ZKWDdv3sS8efOQkJDwwv3L+t4VtgNfbn3cORxISlMb2zH/Y6yPO4c1u1MAAJOid2PWyv//jdA2FobY+d1gDAnbjMSLN2s0XpI2HV1duLg2R8KJeLzdwwvA02eEJiTEw2/QJ7UcXd0j5cpILBpliYsXL6Jdu3alxtu2bYuLFy9WOai6TF+hA6eGZqr3DjYmaOVkhQePCvD3nRzczylQm19cokTm/Vxc+fvpv4L/vqO+zD23oAgAcO3mA9zkEneqpCH+AQj9YhqaN2+BFi1b4b9rY1FQUADf9/u/fGcSFfOVhglLLpcjMzMTjRs3Vhu/ffs2tLVZKVVFu6a22Bs5VPV+/ph3AABrd6e88NoVUXXo5dMbD+7fx/dLonDv3l00beaC75evgDlbglQLNHqW4KBBg3D79m1s27YNxsZPV6FlZ2fD19cXlpaWqu/Eqgw+S5BqCp8lSDVFzGcJNpmyW7RjXfmul2jHqkka/TgXLFiAbt26wd7eHm3btgUAJCcnw8rKCmvXrhU1QCIiYksQ0DBhNWzYEGfPnsW6deuQkpICPT09BAQEYNCgQWUuYyciIqoqjQtWfX19BAYGihkLERGVg6sEK5Gwtm/fDh8fH+jo6GD79hdf/H/vPWl+1woR0auK+aoSCcvX1xcZGRmwtLSEr69vufNkMhlKSkrEiI2IiEilwglLqVSW+WsiIqp+WlossSr9LMHi4mL06NEDV65cqY54iIioDDKZeC+pqnTC0tHRwVl+4ygREdUwjZ7W/sknn2DlypVix0JEROXg09o1XNb+5MkT/PTTT9i3bx/at28PfX19te0RERGiBEdERE9JOM+IRqOEdf78edXDb//66y9RAyIiIiqLRgnr4MGDL59ERESikXIrTywaXcMaPnw4Hj0q/VUVeXl5GD58eJWDIiIidbyGpWHCio19+p04zysoKMCaNWuqHBQREdHzKtUSzMnJgSAIEAQBjx49gkKhUG0rKSnBb7/9BktLS9GDJCKq6yRcGImmUgnLxMREVVK+8cYbpbbLZDLMnj1btOCIiOgpKbfyxFKphHXw4EEIgoC3334bmzdvhpnZ//8qd11dXdjb28PW1lb0IImIiCqVsDw8PAAAaWlpsLOzY8YnIqoh/OtWw0UXBw4cwC+//FJqfNOmTYiNja1yUEREpI6rBDVMWOHh4bCwsCg1bmlpiW+++abKQRERET1PoxuH09PT4ejoWGrc3t4e6enpVQ6KiIjUSbgwEo1GFZalpWWZT2xPSUmBubl5lYMiIiJ1bAlqmLAGDRqEcePG4eDBgygpKUFJSQkOHDiA8ePHw8/PT+wYiYiINGsJzpkzB9evX0ePHj2grf30EEqlEkOHDuU1LCKiaiDhwkg0GiUsXV1dbNy4EXPmzEFKSgr09PTQsmVL2Nvbix0fERGBNw4DGiasZxwcHCAIApycnFSVFhERUXXQ6BpWfn4+RowYgfr166N58+aqlYFjx47Ft99+K2qARET0tCUo1kuqNEpYISEhSElJwaFDh9QegOvl5YWNGzeKFhwRET1Vm6sEjxw5gr59+8LW1hYymQxbt25V2y4IAmbMmAEbGxvo6enBy8sLV65cUZtz//59DB48GEZGRjAxMcGIESOQm5tbqTg0Slhbt27FkiVL0LVrV7WTb968OVJTUzU5JBERvaLy8vLQunVrLF26tMzt8+fPR1RUFGJiYpCQkAB9fX14e3vj8ePHqjmDBw/GhQsXEBcXh507d+LIkSMIDAysVBwaXXi6e/dumV8jkpeXxwuDRETVoDb/avXx8YGPj0+Z2wRBQGRkJL766iv069cPALBmzRpYWVlh69at8PPzw6VLl7B7924kJiaiQ4cOAIDo6Gj07t0bCxYsqPBD0zWqsDp06IBdu3ap3j9LUitWrICbm5smhyQiohd4VW8cTktLQ0ZGBry8vFRjxsbG6Ny5M+Lj4wEA8fHxMDExUSUr4OklJC0tLSQkJFT4szSqsL755hv4+Pjg4sWLePLkCRYvXoyLFy/i+PHjOHz4sCaHJCKiGlJYWIjCwkK1MblcDrlcXuljZWRkAACsrKzUxq2srFTbMjIySnXltLW1YWZmpppTERpVWF27dkVycjKePHmCli1bYu/evbC0tER8fDzat2+vySGJiOgFxFwlGB4eDmNjY7VXeHh4bZ/iS2l885STkxN+/PFHMWMhIqJyiNnKCwkJQXBwsNqYJtUVAFhbWwMAMjMzYWNjoxrPzMxEmzZtVHPu3Lmjtt+TJ09w//591f4VUeGElZOTU+GDGhkZVXguERHVLE3bf2VxdHSEtbU19u/fr0pQOTk5SEhIwOjRowEAbm5uyM7ORlJSkqoLd+DAASiVSnTu3LnCn1XhhGViYvLSDC8IAmQyGUpKSiocABERvVxtrsDOzc3F1atXVe/T0tKQnJwMMzMz2NnZYcKECZg7dy6aNGkCR0dHhIaGwtbWFr6+vgAAFxcX9OrVCyNHjkRMTAyKi4sRFBQEPz+/Cq8QBCqRsA4ePFjxsyMiIlHV5rL2U6dOwdPTU/X+WTvR398fq1evxtSpU5GXl4fAwEBkZ2eja9eu2L17t9qDJdatW4egoCD06NEDWlpaGDBgAKKioioVh0wQBEGTE/jjjz+wfPlypKam4pdffkHDhg2xdu1aODo6omvXrpU+np7nHE3CIKq0B3GhtR0C1REKER+x6rHomGjHOjzRXbRj1SSNVglu3rwZ3t7e0NPTw5kzZ1TLIx8+fMivFyEiqgav6n1YNUmjhDV37lzExMTgxx9/hI6Ojmrc3d0dp0+fFi04IiKiZzQqWC9fvoxu3bqVGjc2NkZ2dnZVYyIioudIuDASjUYVlrW1tdqKkWeOHj2Kxo0bVzkoIiJSx5aghglr5MiRGD9+PBISEiCTyXDr1i2sW7cOkydPVq27JyIiEpNGLcHp06dDqVSiR48eyM/PR7du3SCXyzF58mSMHTtW7BiJiOo8CRdGotEoYclkMnz55ZeYMmUKrl69itzcXLi6usLAwEDs+IiICIAWM5bmzxIEAF1dXbi6uooVCxERUblEvK2NiIiqCwssJiwiIkmQ8uo+sWi0SpCIiKimscIiIpIALRZYTFhERFLAliBbgkREJBGssIiIJIAFFhMWEZEkyMCMxZYgERFJAissIiIJ4CpBJiwiIkngKkG2BImISCJYYRERSQALLCYsIiJJ4NeLsCVIREQSwQqLiEgCWGAxYRERSQJXCbIlSEREEsEKi4hIAlhgMWEREUkCVwmyJUhERBLBCouISAJYXzFhERFJAlcJsiVIREQSwQqLiEgC+PUiTFhERJLAliBbgkREJBGssIiIJIAFFhMWEZEksCXIliAREUkEKywiIgngKkEmLCIiSWBLkC1BIiJ6gZKSEoSGhsLR0RF6enpwcnLCnDlzIAiCao4gCJgxYwZsbGygp6cHLy8vXLlyRfRYmLCIiCRAJuKrMubNm4dly5ZhyZIluHTpEubNm4f58+cjOjpaNWf+/PmIiopCTEwMEhISoK+vD29vbzx+/Lgqp1wKW4JERBJQW18vcvz4cfTr1w99+vQBADg4OGDDhg04efIkgKfVVWRkJL766iv069cPALBmzRpYWVlh69at8PPzEy0WVlhERHVMYWEhcnJy1F6FhYVlzn3zzTexf/9+/PXXXwCAlJQUHD16FD4+PgCAtLQ0ZGRkwMvLS7WPsbExOnfujPj4eFHjZsIiIpIAmUy8V3h4OIyNjdVe4eHhZX7u9OnT4efnh2bNmkFHRwdt27bFhAkTMHjwYABARkYGAMDKykptPysrK9U2sbAlSEQkAWKuEgwJCUFwcLDamFwuL3Puzz//jHXr1mH9+vVo3rw5kpOTMWHCBNja2sLf31+0mCqCCYuIqI6Ry+XlJqjnTZkyRVVlAUDLli1x48YNhIeHw9/fH9bW1gCAzMxM2NjYqPbLzMxEmzZtRI2bLUEiIgkQsyVYGfn5+dDSUk8V9erVg1KpBAA4OjrC2toa+/fvV23PyclBQkIC3Nzcqnze/8YKi4hIAmprlWDfvn3x9ddfw87ODs2bN8eZM2cQERGB4cOHA3jaqpwwYQLmzp2LJk2awNHREaGhobC1tYWvr6+osTBhERFRuaKjoxEaGorPP/8cd+7cga2tLUaNGoUZM2ao5kydOhV5eXkIDAxEdnY2unbtit27d0OhUIgai0z49+3KtUjPc05th0B1xIO40NoOgeoIhYglwee/XhTtWN/3dxXtWDWJFRYRkQTwWYJcdEFERBLxylRYbNNQTTHtGFTbIVAdUXBmiWjHYnXxCiUsIiIqH1uCTNpERCQRrLCIiCSA3zjMhEVEJAlMWGwJEhGRRLDCIiKSAC66YMIiIpIEtgTZEiQiIolghUVEJAHsCDJhERFJQm19vcirhC1BIiKSBFZYREQSwOqCCYuISBLYEWTSJiIiiWCFRUQkAVx0wYRFRCQJzFdsCRIRkUSwwiIikgA+mokJi4hIEngNiy1BIiKSCFZYREQSwAKLCYuISBJ4DYstQSIikghWWEREEiADSywmLCIiCWBLkC1BIiKSCFZYREQSwAqLCYuISBJkXNfOliAREUkDKywiIglgS5AJi4hIEtgRZEuQiIgkghUWEZEE8GntTFhERJLAa1hsCRIRkUSwwiIikgB2BFlhERFJghZkor0q6+bNm/jkk09gbm4OPT09tGzZEqdOnVJtFwQBM2bMgI2NDfT09ODl5YUrV66IefoAmLCIiOgFHjx4AHd3d+jo6OD333/HxYsXsXDhQpiamqrmzJ8/H1FRUYiJiUFCQgL09fXh7e2Nx48fixoLW4JERBJQWy3BefPmoVGjRli1apVqzNHRUfVrQRAQGRmJr776Cv369QMArFmzBlZWVti6dSv8/PxEi4UVFhGRBGjJxHsVFhYiJydH7VVYWFjm527fvh0dOnTAhx9+CEtLS7Rt2xY//vijantaWhoyMjLg5eWlGjM2Nkbnzp0RHx8v7s9A1KMREdErLzw8HMbGxmqv8PDwMudeu3YNy5YtQ5MmTbBnzx6MHj0a48aNQ2xsLAAgIyMDAGBlZaW2n5WVlWqbWNgSJCKSADFvHA4JCUFwcLDamFwuL3OuUqlEhw4d8M033wAA2rZti/PnzyMmJgb+/v6ixVQRrLCIiCRAJhPvJZfLYWRkpPYqL2HZ2NjA1dVVbczFxQXp6ekAAGtrawBAZmam2pzMzEzVNrEwYRERUbnc3d1x+fJltbG//voL9vb2AJ4uwLC2tsb+/ftV23NycpCQkAA3NzdRY2FLkIhIAmrrWYITJ07Em2++iW+++QYDBw7EyZMn8cMPP+CHH34A8PSLJSdMmIC5c+eiSZMmcHR0RGhoKGxtbeHr6ytqLExYREQSUFvL2jt27IgtW7YgJCQEYWFhcHR0RGRkJAYPHqyaM3XqVOTl5SEwMBDZ2dno2rUrdu/eDYVCIWosMkEQBFGPqKHHT2o7AqorTDsG1XYIVEcUnFki2rF+SkwX7VjDO9qJdqyaxAqLiEgCuOCACYuISBJkfPotkzYREUkDKywiIglgfcWERUQkCbW1rP1VwpYgERFJAissIiIJYH3FhEVEJAnsCLIlSEREEsEKi4hIAngfFhMWEZEksB3GnwEREUkEKywiIglgS5AJi4hIEpiu2BIkIiKJYIVFRCQBbAkyYRERSQLbYfwZEBGRRLDCIiKSALYEmbCIiCSB6YotQSIikghWWEREEsCOIBMWEZEkaLEpyJYgERFJAyssIiIJYEuQCYuISBJkbAmyJUhERNLACouISALYEmTCIiKSBK4SZEuQiIgkghUWEZEEsCXIhEVEJAlMWFVIWKmpqYiMjMSlS5cAAK6urhg/fjycnJxEC46IiOgZja5h7dmzB66urjh58iRatWqFVq1aISEhAc2bN0dcXJzYMRIR1XkyEf+TKo0qrOnTp2PixIn49ttvS41PmzYNPXv2FCU4IiJ6Sku6eUY0GlVYly5dwogRI0qNDx8+HBcvXqxyUERERM/TKGE1aNAAycnJpcaTk5NhaWlZ1ZiIiOg5bAlq2BIcOXIkAgMDce3aNbz55psAgGPHjmHevHkIDg4WNUAiIuIqQUDDhBUaGgpDQ0MsXLgQISEhAABbW1vMmjUL48aNEzVAIiIiQMOWoEwmw8SJE/HPP//g4cOHePjwIf755x+MHz8eMv4zgIhIdK9KS/Dbb7+FTCbDhAkTVGOPHz/GmDFjYG5uDgMDAwwYMACZmZlVPOPSqvxoJkNDQxgaGooRCxERlUNLJt5LU4mJiVi+fDlatWqlNj5x4kTs2LEDmzZtwuHDh3Hr1i3079+/imdcmkYJKzMzE0OGDIGtrS20tbVRr149tRcREb1ecnNzMXjwYPz4448wNTVVjT98+BArV65EREQE3n77bbRv3x6rVq3C8ePHceLECVFj0Oga1rBhw5Ceno7Q0FDY2NiwDVgL/rd+HWJXrcS9e3fxRtNmmP5FKFo+968eohdxb+eEiUO90M7VDjYNjDFw4g/YceisavsPsz/BkPe6qO2z99hF9Av6XvV+U+QotH6jIRqYGeJBTj4OJlzGV1HbcPvuwxo7j7pCzNV9hYWFKCwsVBuTy+WQy+Xl7jNmzBj06dMHXl5emDt3rmo8KSkJxcXF8PLyUo01a9YMdnZ2iI+PR5cuXco6nEY0SlhHjx7FH3/8gTZt2ogWCFXc7t9/w4L54fhq5my0bNka69bGYvSoEdi2czfMzc1rOzySCH09Oc79dRNrtsVjY0RgmXP2HLuAUTP/q3pfWPREbfuRxL/w3co9yLj3ELaWJgif+D7WfzcCnsMiqjX2ukjMuiA8PByzZ89WG5s5cyZmzZpV5vz//e9/OH36NBITE0tty8jIgK6uLkxMTNTGrayskJGRIVbIADRMWI0aNYIgCKIGQhW3NnYV+n8wEL7vDwAAfDVzNo4cOYStv27GiJFl/8VD9Ly9xy5i77EX3+hfVPQEmVmPyt0eve6g6tfptx9gwao4/BwxEtraWnjyRClarCSukJCQUrcglVdd/f333xg/fjzi4uKgUChqIrxyaXQNKzIyEtOnT8f169dFDodeprioCJcuXkAXtzdVY1paWujS5U2cTTlTi5HR6+itDk1wY384UraEYvEXH8HMWL/cuaZG9eHn0wEnUtKYrKqBTMSXXC6HkZGR2qu8hJWUlIQ7d+6gXbt20NbWhra2Ng4fPoyoqChoa2vDysoKRUVFyM7OVtsvMzMT1tbWov4MNKqwPvroI+Tn58PJyQn169eHjo6O2vb79++LEhyV9iD7AUpKSkq1/szNzZGWdq2WoqLXUdzxS9h2IAXXb2ah8X8sMHtsX2xbMhoe/guhVP7/Dsvccf3wmV836OvJkXA2Df3HxdRi1K8vrVpaK9CjRw+cO3dObSwgIADNmjXDtGnT0KhRI+jo6GD//v0YMOBp1+fy5ctIT0+Hm5ubqLFolLAiIyOr9KFlXfAT6r34gh8R1axNe5JUv75w9RbOXbmJSztno1uHJjh08i/VtkVr9mH11njY2Zjhy1E+WDFnCJPWa8TQ0BAtWrRQG9PX14e5ublqfMSIEQgODoaZmRmMjIwwduxYuLm5ibrgAtAwYfn7+1fpQ8u64Pdl6Ex8NWNWlY5bF5iamKJevXrIyspSG8/KyoKFhUUtRUV1wfWbWbj74BGcGjVQS1hZ2XnIys7D1fQ7uJyWgat75qJzK0cknE2rxWhfP6/yWuxFixZBS0sLAwYMQGFhIby9vfH999+/fMdKqvI3Dj9+/BhFRUVqY0ZGRi/cp6wLfkI9VlcVoaOrCxfX5kg4EY+3ezxdRqpUKpGQEA+/QZ/UcnT0OmtoaQJzY31k3Mspd47W/92VqqvDLzMX3SuUsQ4dOqT2XqFQYOnSpVi6dGm1fq5Gf6ry8vIwbdo0/Pzzz6X+pQ8AJSUlL9y/rPX+j5+UM5lKGeIfgNAvpqF58xZo0bIV/rs2FgUFBfB9X/w7y+n1pa+nC6dGDVTvHRqao9UbDfEgJx/3H+bhy1G9sXV/MjLu5aBxIwt8Pd4XqX/fQ9zxp98y3rGFPdo3t8fxM6nIfpQPx/80wMzP+yA1/S6rK6oWGiWsqVOn4uDBg1i2bBmGDBmCpUuX4ubNm1i+fHmpL3Uk8fXy6Y0H9+/j+yVRuHfvLpo2c8H3y1fAnC1BqoR2rvbYu2K86v38yU8vmK/dfgLjvtmIFk0aYnDfzjAx1MPtuw+xL/5PhH2/E0XFT/91mf+4GP3ebo2vPusDfT1dZNx7iL3HL2Hejz+p5pB4pPy1IGKRCRrcUGVnZ4c1a9age/fuMDIywunTp+Hs7Iy1a9diw4YN+O233yodCCssqimmHYNqOwSqIwrOLBHtWCeviff0kE6NjUU7Vk3S6D6s+/fvo3HjxgCeXq96toy9a9euOHLkiHjRERER/R+NElbjxo2Rlva0R92sWTP8/PPPAIAdO3aUejwHERFVnZg3DkuVRgkrICAAKSkpAIDp06dj6dKlUCgUmDhxIqZMmSJqgEREBGYsaHgN63k3btxAUlISnJ2dS31PSkXxGhbVFF7Dopoi5jWsxDTxrmF1dJTmNSxRbpawt7eHvb29GIciIqIycJVgJRJWVFQUAgMDoVAoEBUV9cK548aNq3JgRET0//FrByvREnR0dMSpU6dgbm4OR0fH8g8ok+Hatco/hJUtQaopbAlSTRGzJZh0vfwnjFRWe4cXP43oVVXhCuvZqsDnf/0s3/Fbh4mIqg//htVwlSAArFy5Ei1atIBCoYBCoUCLFi2wYsUKMWMjIqJnuEpQs0UXM2bMQEREhOoR8gAQHx+PiRMnIj09HWFhYaIGSUREpNGy9gYNGiAqKgqDBg1SG9+wYQPGjh2Le/fuVToQXsOimsJrWFRTxLyGdebGI9GO1dbeULRj1SSNKqzi4mJ06NCh1Hj79u3x5AkzDxGR2LhMQMNrWEOGDMGyZctKjf/www8YPHhwlYMiIiJ6nsY3Dq9cuRJ79+5VfQVyQkIC0tPTMXToULUvZ4yIiKh6lEREdRwLLA0T1vnz59GuXTsAQGpqKgDAwsICFhYWOH/+vGoel7oTEYmEf51qlrAOHjwodhxEREQvJMqzBImIqHrxWYJMWEREksArLFV40gUREVFNYoVFRCQBLLCYsIiIpIEZiy1BIiKSBlZYREQSwFWCTFhERJLAVYJsCRIRkUSwwiIikgAWWExYRETSwIzFliAREUkDKywiIgngKkEmLCIiSeAqQbYEiYhIIlhhERFJAAssJiwiImlgxmJLkIiIpIEVFhGRBHCVIBMWEZEkcJUgW4JERCQRTFhERBIgE/FVGeHh4ejYsSMMDQ1haWkJX19fXL58WW3O48ePMWbMGJibm8PAwAADBgxAZmampqdaLiYsIiIq1+HDhzFmzBicOHECcXFxKC4uxjvvvIO8vDzVnIkTJ2LHjh3YtGkTDh8+jFu3bqF///6ixyITBEEQ/agaePyktiOgusK0Y1Bth0B1RMGZJaIdK/VugWjHcmqgp/G+d+/ehaWlJQ4fPoxu3brh4cOHaNCgAdavX48PPvgAAPDnn3/CxcUF8fHx6NKli1hhs8IiIpICmYj/FRYWIicnR+1VWFhYoTgePnwIADAzMwMAJCUlobi4GF5eXqo5zZo1g52dHeLj40X9GTBhERHVMeHh4TA2NlZ7hYeHv3Q/pVKJCRMmwN3dHS1atAAAZGRkQFdXFyYmJmpzrayskJGRIWrcXNZORCQBYi5rDwkJQXBwsNqYXC5/6X5jxozB+fPncfToUfGCqQQmLCIiCRDzNiy5XF6hBPVvQUFB2LlzJ44cOYL//Oc/qnFra2sUFRUhOztbrcrKzMyEtbW1WCEDYEuQiIheQBAEBAUFYcuWLThw4AAcHR3Vtrdv3x46OjrYv3+/auzy5ctIT0+Hm5ubqLGwwiIikoJaetLFmDFjsH79emzbtg2Ghoaq61LGxsbQ09ODsbExRowYgeDgYJiZmcHIyAhjx46Fm5ubqCsEASYsIiJJqK1nCS5btgwA0L17d7XxVatWYdiwYQCARYsWQUtLCwMGDEBhYSG8vb3x/fffix4L78OiOof3YVFNEfM+rBtZFVt2XhH25pW7fvWqYIVFRCQBfPgtExYRkSQwX3GVIBERSQQrLCIiCWBLkAmLiEgimLHYEiQiIklghUVEJAFsCTJhERFJAvMVW4JERCQRrLCIiCSALUEmLCIiSaitZwm+StgSJCIiSWCFRUQkBSywmLCIiKSA+YotQSIikghWWEREEsBVgkxYRESSwFWCbAkSEZFEsMIiIpICFlhMWEREUsB8xZYgERFJBCssIiIJ4CpBJiwiIkngKkG2BImISCJYYRERSQBbgqywiIhIIpiwiIhIEtgSJCKSALYEmbCIiCSBqwTZEiQiIolghUVEJAFsCTJhERFJAvMVW4JERCQRrLCIiKSAJRYTFhGRFHCVIFuCREQkEaywiIgkgKsEmbCIiCSB+YotQSIikggmLCIiKZCJ+NLA0qVL4eDgAIVCgc6dO+PkyZNVORuNMGEREUmATMT/Kmvjxo0IDg7GzJkzcfr0abRu3Rre3t64c+dONZxp+ZiwiIjohSIiIjBy5EgEBATA1dUVMTExqF+/Pn766acajYOLLoiIJEDMVYKFhYUoLCxUG5PL5ZDL5aXmFhUVISkpCSEhIaoxLS0teHl5IT4+XrygKuCVSViKVyYSaSgsLER4eDhCQkLK/ENG5Ss4s6S2Q5AU/ll7NYj5d+SsueGYPXu22tjMmTMxa9asUnPv3buHkpISWFlZqY1bWVnhzz//FC+oCpAJgiDU6CeSKHJycmBsbIyHDx/CyMiotsOh1xj/rL1+KlNh3bp1Cw0bNsTx48fh5uamGp86dSoOHz6MhISEao/3GdY1RER1THnJqSwWFhaoV68eMjMz1cYzMzNhbW1dHeGVi4suiIioXLq6umjfvj3279+vGlMqldi/f79axVUTWGEREdELBQcHw9/fHx06dECnTp0QGRmJvLw8BAQE1GgcTFgSJZfLMXPmTF4Ep2rHP2v00Ucf4e7du5gxYwYyMjLQpk0b7N69u9RCjOrGRRdERCQJvIZFRESSwIRFRESSwIRFRESSwIRVjkOHDkEmkyE7O7tWPl8mk2Hr1q218tllcXBwQGRkZG2HQSLj7ytJCVcJ1pBDhw7B09MTDx48gImJyUvn3759G6amptUfWAUlJiZCX19f9V4mk2HLli3w9fWtvaCoyp7/fSV6lTFhvWKKioqgq6tb43eQv0yDBg2q5bjPzpdqR3X9vhJVhzrdElQqlQgPD4ejoyP09PTQunVr/PLLL+XOP3r0KN566y3o6emhUaNGGDduHPLy8lTbCwsLMW3aNDRq1AhyuRzOzs5YuXIlrl+/Dk9PTwCAqakpZDIZhg0bBgDo3r07goKCMGHCBFhYWMDb2xtA6ZbgP//8g0GDBsHMzAz6+vro0KFDhZ/hNXfuXFhaWsLQ0BCffvoppk+fjjZt2qi2d+/eHRMmTFDbx9fXVxUjoN46cnBwAAC8//77kMlkqvepqano168frKysYGBggI4dO2Lfvn1qx3VwcMCcOXMwdOhQGBkZITAwsELnQJp59ucrKCgIxsbGsLCwQGhoKJ7dzfJ8SzAiIgItW7aEvr4+GjVqhM8//xy5ubmq7atXr4aJiQn27NkDFxcXGBgYoFevXrh9+7ZqjlKpRFhYGP7zn/9ALper7tkhqqo6nbDCw8OxZs0axMTE4MKFC5g4cSI++eQTHD58uNTc1NRU9OrVCwMGDMDZs2exceNGHD16FEFBQao5Q4cOxYYNGxAVFYVLly5h+fLlMDAwQKNGjbB582YAwOXLl3H79m0sXrxYtV9sbCx0dXVx7NgxxMTElPrs3NxceHh44ObNm9i+fTtSUlIwdepUKJXKl57junXr8PXXX2PevHlISkqCnZ0dli1bpsmPSyUxMREAsGrVKty+fVv1Pjc3F71798b+/ftx5swZ9OrVC3379kV6erra/gsWLEDr1q1x5swZhIaGVikWernY2Fhoa2vj5MmTWLx4MSIiIrBixYoy52ppaSEqKgoXLlxAbGwsDhw4gKlTp6rNyc/Px4IFC7B27VocOXIE6enpmDx5smr74sWLsXDhQixYsABnz56Ft7c33nvvPVy5cqVaz5PqAKGOevz4sVC/fn3h+PHjauMjRowQBg0aJBw8eFAAIDx48EA1HhgYqDb3jz/+ELS0tISCggLh8uXLAgAhLi6uzM97/njPeHh4CG3bti01H4CwZcsWQRAEYfny5YKhoaGQlZVV6fPs3LmzMGbMGLUxd3d3oXXr1moxjB8/Xm1Ov379BH9/f9V7e3t7YdGiRWXG9yLNmzcXoqOj1Y7j6+tbmVOgKvDw8BBcXFwEpVKpGps2bZrg4uIiCELp39fnbdq0STA3N1e9X7VqlQBAuHr1qmps6dKlgpWVleq9ra2t8PXXX6sdp2PHjsLnn39e1dOhOq7OVlhXr15Ffn4+evbsCQMDA9VrzZo1SE1NLTU/JSUFq1evVpvr7e0NpVKJtLQ0JCcno169evDw8Kh0LO3bt3/h9uTkZLRt2xZmZmaVPvbly5fRqVMntbHn34slNzcXkydPhouLC0xMTGBgYIBLly6VqrA6dOhQLZ9PZevSpQtk//r2Pzc3N1y5cgUlJSWl5u7btw89evRAw4YNYWhoiCFDhiArKwv5+fmqOfXr14eTk5PqvY2Njeqr0nNycnDr1i24u7urHdfd3R2XLl0S+9Sojqmziy6e9eV37dqFhg0bqm2Ty+WlklZubi5GjRqFcePGlTqWnZ0drl69qnEsL1ulpaenp/GxK0JLS0t1TeOZ4uLiSh9n8uTJiIuLw4IFC+Ds7Aw9PT188MEHKCoqUpvHVWmvpuvXr+Pdd9/F6NGj8fXXX8PMzAxHjx7FiBEjUFRUhPr16wMAdHR01PaTyWSl/vwQVYc6W2G5urpCLpcjPT0dzs7Oaq9GjRqVmt+uXTtcvHix1FxnZ2fo6uqiZcuWUCqVZV7/AqBaCVfWv2pfplWrVkhOTsb9+/crvW/Tpk1V15ieef59gwYN1C6al5SU4Pz58y88ro6OTqlzOXbsGIYNG4b3338fLVu2hLW1Na5fv17pmElczy/OOXHiBJo0aYJ69eqpjSclJUGpVGLhwoXo0qUL3njjDdy6datSn2VkZARbW1scO3ZMbfzYsWNwdXXV7ASI/k+dTViGhoaYPHkyJk6ciNjYWKSmpuL06dOIjo5GbGxsqfnTpk3D8ePHERQUhOTkZFy5cgXbtm1TLbpwcHCAv78/hg8fjq1btyItLQ2HDh3Czz//DACwt7eHTCbDzp07cffuXbWVVy8zaNAgWFtbw9fXF8eOHcO1a9ewefNmxMfHv3TfsWPHYuXKlYiNjcWVK1cwd+5cnD17Vq1F9Pbbb2PXrl3YtWsX/vzzT4wePfqlN0w7ODhg//79yMjIwIMHDwAATZo0wa+//ork5GSkpKTg448/rtDCEKpe6enpCA4OxuXLl7FhwwZER0dj/PjxpeY5OzujuLgY0dHRuHbtGtauXVvmIqCXmTJlCubNm4eNGzfi8uXLmD59OpKTk8v8TKJKqe2LaLVJqVQKkZGRQtOmTQUdHR2hQYMGgre3t3D48OEyF0mcPHlS6Nmzp2BgYCDo6+sLrVq1Uru4XFBQIEycOFGwsbERdHV1BWdnZ+Gnn35SbQ8LCxOsra0FmUymWtBQ1oIHQSi9qOH69evCgAEDBCMjI6F+/fpChw4dhISEhAqdZ1hYmGBhYSEYGBgIw4cPF8aNGyd06dJFtb2oqEgYPXq0YGZmJlhaWgrh4eEvXXSxfft2wdnZWdDW1hbs7e0FQRCEtLQ0wdPTU9DT0xMaNWokLFmypNT5vewiP4nLw8ND+Pzzz4XPPvtMMDIyEkxNTYUvvvhCtQjj+d+PiIgIwcbGRtDT0xO8vb2FNWvWqP1/sGrVKsHY2FjtM7Zs2SL8+6+SkpISYdasWULDhg0FHR0doXXr1sLvv/9e3adKdQC/XqQO6tmzJ6ytrbF27draDoWqWffu3dGmTRs+foleC3V20UVdkZ+fj5iYGHh7e6NevXrYsGED9u3bh7i4uNoOjYioUursNazXRfPmzdWW2v/7tW7dOshkMvz222/o1q0b2rdvjx07dmDz5s3w8vKq7dCJiCqFLUGJu3HjRrlL0K2srGBoaFjDERERVQ8mLCIikgS2BImISBKYsIiISBKYsIiISBKYsIiISBKYsIiISBKYsIiISBKYsIiISBKYsIiISBL+H4NvNgct2zSuAAAAAElFTkSuQmCC\n"},"metadata":{}}]},{"cell_type":"markdown","source":["### Save the best model\n","\n","- Make sure to donwload the model when you are planning to use the model later."],"metadata":{"id":"Y96cMnp_uyJu"}},{"cell_type":"code","source":["import pickle\n","\n","fh = open(\"/content/drive/MyDrive/AIClub_AP_Mudunuri_Praneeth/datasets/music_instrument_feature.csv\",\"wb\")\n","pickle.dump(best_model, fh)\n","fh.close()"],"metadata":{"id":"MQqy9yzruzxk","executionInfo":{"status":"ok","timestamp":1718863046577,"user_tz":-330,"elapsed":1428,"user":{"displayName":"M. Praneeth","userId":"01426730292304144613"}}},"execution_count":47,"outputs":[]}]}